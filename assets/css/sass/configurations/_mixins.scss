/**
 *
 * BREAKPOINTS
 * 
 */

@mixin breakpoint-tiny {
	@media only screen and (max-width:(nth($breakpoints,1) - 1px)) { @content; }
}
@mixin breakpoint-small {
	@media only screen and (min-width:nth($breakpoints,1)) and (max-width:(nth($breakpoints,2) - 1px)) { @content; }
}
@mixin breakpoint-medium {
	@media only screen and (min-width:nth($breakpoints,2)) and (max-width:(nth($breakpoints,3) - 1px)) { @content; }
}
@mixin breakpoint-large {
	@media only screen and (min-width: nth($breakpoints,3)) { @content; }
}

@mixin breakpoint-tiny-small {
	@media only screen and (max-width:(nth($breakpoints,2) - 1px)) { @content; }
}
@mixin breakpoint-small-medium {
	@media only screen and (min-width:nth($breakpoints,1)) and (max-width:(nth($breakpoints,3) - 1px)) { @content; }
}
@mixin breakpoint-medium-large {
	@media only screen and (min-width: nth($breakpoints,2)) { @content; }
}

@mixin breakpoint-tiny-small-medium {
	@media only screen and (max-width:(nth($breakpoints,3) - 1px)) { @content; }
}
@mixin breakpoint-small-medium-large {
	@media only screen and (min-width: nth($breakpoints,1)) { @content; }
}


/**
 * ANIMATIONS AND KEYFRAMES
 */


@mixin animation($name,$duration,$timingFunction:"",$delay:"",$iterationCount:"",$direction:"",$fillMode:forwards){
	animation: $name $duration #{$timingFunction} #{$delay} #{$iterationCount} #{$fillMode};
	-webkit-animation: $name $duration #{$timingFunction} #{$delay} #{$iterationCount} #{$fillMode};
	@if $direction != ""{
		animation-direction : $direction;
		-webkit-animation-direction : $direction;
	}
}

@mixin keyframes($name){
	@keyframes #{$name} {
		@content;
	}
	$legacy-support-for-ie : false;
	$experimental-support-for-mozilla : false;
	$experimental-support-for-opera : false;
	$experimental-support-for-microsoft : false;
	@-webkit-keyframes #{$name} {
		@content;
	}
	$experimental-support-for-webkit : false;
	$experimental-support-for-mozilla : true;
	@-moz-keyframes #{$name} {
		@content;
	}
	$experimental-support-for-webkit : true;
	$legacy-support-for-ie : true;
	$experimental-support-for-mozilla : true;
	$experimental-support-for-opera : true;
	$experimental-support-for-microsoft : true;
}

/**
 * POSITIONS
 */

@mixin position($position, $args) {

  	position: $position;

  	@each $o in top right bottom left {
        $i: index($args, $o);
 
    	@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number  {
          	#{$o}: nth($args, $i + 1);
    	}
  	}

}
 
@mixin absolute($args : "") {
    @include position(absolute, $args);
}
 
@mixin fixed($args : "") {
    @include position(fixed, $args);
}
 
@mixin relative($args : "") {
    @include position(relative, $args);
}

/**
 * SIZES
 */

@mixin size($args) {

	@if type-of($args) == number{
		
		width  : $args;
		height : $args;

	} @else if type-of($args) == list{

		@each $o in width height max-width max-height min-width min-height {
		  	$i: index($args, $o);
		
		  	@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number  {
		        #{$o}: nth($args, $i + 1);
		  	}
		}

	}
}

/**
 * INLINE BLOCK + VERTICAL ALIGN
 */

@mixin inline-block($align : null){
	
	display: inline-block;
	@if $align != null {
		vertical-align: $align;
	}

}

/**
 * MULTIPLE COLORS
 */

@mixin multiple-colors($property){
	@each $colorname, $color in $colors{
		.#{$colorname} & { #{$property} : $color; }
	}
}